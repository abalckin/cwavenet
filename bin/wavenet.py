# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_wavenet', [dirname(__file__)])
        except ImportError:
            import _wavenet
            return _wavenet
        if fp is not None:
            try:
                _mod = imp.load_module('_wavenet', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _wavenet = swig_import_helper()
    del swig_import_helper
else:
    import _wavenet
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import wavelet
class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _wavenet.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """
        value(SwigPyIterator self) -> PyObject *

        Parameters:
            self: swig::SwigPyIterator const *

        """
        return _wavenet.SwigPyIterator_value(self)

    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters:
            n: size_t

        incr(SwigPyIterator self) -> SwigPyIterator

        Parameters:
            self: swig::SwigPyIterator *

        """
        return _wavenet.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters:
            n: size_t

        decr(SwigPyIterator self) -> SwigPyIterator

        Parameters:
            self: swig::SwigPyIterator *

        """
        return _wavenet.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters:
            x: swig::SwigPyIterator const &

        """
        return _wavenet.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters:
            x: swig::SwigPyIterator const &

        """
        return _wavenet.SwigPyIterator_equal(self, *args)

    def copy(self):
        """
        copy(SwigPyIterator self) -> SwigPyIterator

        Parameters:
            self: swig::SwigPyIterator const *

        """
        return _wavenet.SwigPyIterator_copy(self)

    def next(self):
        """
        next(SwigPyIterator self) -> PyObject *

        Parameters:
            self: swig::SwigPyIterator *

        """
        return _wavenet.SwigPyIterator_next(self)

    def __next__(self):
        """
        __next__(SwigPyIterator self) -> PyObject *

        Parameters:
            self: swig::SwigPyIterator *

        """
        return _wavenet.SwigPyIterator___next__(self)

    def previous(self):
        """
        previous(SwigPyIterator self) -> PyObject *

        Parameters:
            self: swig::SwigPyIterator *

        """
        return _wavenet.SwigPyIterator_previous(self)

    def advance(self, *args):
        """
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters:
            n: ptrdiff_t

        """
        return _wavenet.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters:
            x: swig::SwigPyIterator const &

        """
        return _wavenet.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters:
            x: swig::SwigPyIterator const &

        """
        return _wavenet.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters:
            n: ptrdiff_t

        """
        return _wavenet.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters:
            n: ptrdiff_t

        """
        return _wavenet.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters:
            n: ptrdiff_t

        """
        return _wavenet.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters:
            n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters:
            x: swig::SwigPyIterator const &

        """
        return _wavenet.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _wavenet.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class std_vector(_object):
    """Proxy of C++ std::vector<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, std_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, std_vector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(std_vector self) -> SwigPyIterator

        Parameters:
            self: std::vector< double > *

        """
        return _wavenet.std_vector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(std_vector self) -> bool

        Parameters:
            self: std::vector< double > const *

        """
        return _wavenet.std_vector___nonzero__(self)

    def __bool__(self):
        """
        __bool__(std_vector self) -> bool

        Parameters:
            self: std::vector< double > const *

        """
        return _wavenet.std_vector___bool__(self)

    def __len__(self):
        """
        __len__(std_vector self) -> std::vector< double >::size_type

        Parameters:
            self: std::vector< double > const *

        """
        return _wavenet.std_vector___len__(self)

    def pop(self):
        """
        pop(std_vector self) -> std::vector< double >::value_type

        Parameters:
            self: std::vector< double > *

        """
        return _wavenet.std_vector_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(std_vector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> std_vector

        Parameters:
            i: std::vector< double >::difference_type
            j: std::vector< double >::difference_type

        """
        return _wavenet.std_vector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(std_vector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, 
            std_vector v=std::vector< double,std::allocator< double > >())

        Parameters:
            i: std::vector< double >::difference_type
            j: std::vector< double >::difference_type
            v: std::vector< double,std::allocator< double > > const &

        __setslice__(std_vector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters:
            i: std::vector< double >::difference_type
            j: std::vector< double >::difference_type

        """
        return _wavenet.std_vector___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(std_vector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters:
            i: std::vector< double >::difference_type
            j: std::vector< double >::difference_type

        """
        return _wavenet.std_vector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(std_vector self, std::vector< double >::difference_type i)

        Parameters:
            i: std::vector< double >::difference_type

        __delitem__(std_vector self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        """
        return _wavenet.std_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(std_vector self, PySliceObject * slice) -> std_vector

        Parameters:
            slice: PySliceObject *

        __getitem__(std_vector self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &

        Parameters:
            i: std::vector< double >::difference_type

        """
        return _wavenet.std_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(std_vector self, PySliceObject * slice, std_vector v)

        Parameters:
            slice: PySliceObject *
            v: std::vector< double,std::allocator< double > > const &

        __setitem__(std_vector self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        __setitem__(std_vector self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)

        Parameters:
            i: std::vector< double >::difference_type
            x: std::vector< double >::value_type const &

        """
        return _wavenet.std_vector___setitem__(self, *args)

    def append(self, *args):
        """
        append(std_vector self, std::vector< double >::value_type const & x)

        Parameters:
            x: std::vector< double >::value_type const &

        """
        return _wavenet.std_vector_append(self, *args)

    def empty(self):
        """
        empty(std_vector self) -> bool

        Parameters:
            self: std::vector< double > const *

        """
        return _wavenet.std_vector_empty(self)

    def size(self):
        """
        size(std_vector self) -> std::vector< double >::size_type

        Parameters:
            self: std::vector< double > const *

        """
        return _wavenet.std_vector_size(self)

    def clear(self):
        """
        clear(std_vector self)

        Parameters:
            self: std::vector< double > *

        """
        return _wavenet.std_vector_clear(self)

    def swap(self, *args):
        """
        swap(std_vector self, std_vector v)

        Parameters:
            v: std::vector< double > &

        """
        return _wavenet.std_vector_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(std_vector self) -> std::vector< double >::allocator_type

        Parameters:
            self: std::vector< double > const *

        """
        return _wavenet.std_vector_get_allocator(self)

    def begin(self):
        """
        begin(std_vector self) -> std::vector< double >::iterator

        Parameters:
            self: std::vector< double > *

        """
        return _wavenet.std_vector_begin(self)

    def end(self):
        """
        end(std_vector self) -> std::vector< double >::iterator

        Parameters:
            self: std::vector< double > *

        """
        return _wavenet.std_vector_end(self)

    def rbegin(self):
        """
        rbegin(std_vector self) -> std::vector< double >::reverse_iterator

        Parameters:
            self: std::vector< double > *

        """
        return _wavenet.std_vector_rbegin(self)

    def rend(self):
        """
        rend(std_vector self) -> std::vector< double >::reverse_iterator

        Parameters:
            self: std::vector< double > *

        """
        return _wavenet.std_vector_rend(self)

    def pop_back(self):
        """
        pop_back(std_vector self)

        Parameters:
            self: std::vector< double > *

        """
        return _wavenet.std_vector_pop_back(self)

    def erase(self, *args):
        """
        erase(std_vector self, std::vector< double >::iterator pos) -> std::vector< double >::iterator

        Parameters:
            pos: std::vector< double >::iterator

        erase(std_vector self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator

        Parameters:
            first: std::vector< double >::iterator
            last: std::vector< double >::iterator

        """
        return _wavenet.std_vector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(double)> self) -> std_vector
        __init__(std::vector<(double)> self, std_vector arg2) -> std_vector

        Parameters:
            arg2: std::vector< double > const &

        __init__(std::vector<(double)> self, std::vector< double >::size_type size) -> std_vector

        Parameters:
            size: std::vector< double >::size_type

        __init__(std::vector<(double)> self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> std_vector

        Parameters:
            size: std::vector< double >::size_type
            value: std::vector< double >::value_type const &

        """
        this = _wavenet.new_std_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """
        push_back(std_vector self, std::vector< double >::value_type const & x)

        Parameters:
            x: std::vector< double >::value_type const &

        """
        return _wavenet.std_vector_push_back(self, *args)

    def front(self):
        """
        front(std_vector self) -> std::vector< double >::value_type const &

        Parameters:
            self: std::vector< double > const *

        """
        return _wavenet.std_vector_front(self)

    def back(self):
        """
        back(std_vector self) -> std::vector< double >::value_type const &

        Parameters:
            self: std::vector< double > const *

        """
        return _wavenet.std_vector_back(self)

    def assign(self, *args):
        """
        assign(std_vector self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters:
            n: std::vector< double >::size_type
            x: std::vector< double >::value_type const &

        """
        return _wavenet.std_vector_assign(self, *args)

    def resize(self, *args):
        """
        resize(std_vector self, std::vector< double >::size_type new_size)

        Parameters:
            new_size: std::vector< double >::size_type

        resize(std_vector self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)

        Parameters:
            new_size: std::vector< double >::size_type
            x: std::vector< double >::value_type const &

        """
        return _wavenet.std_vector_resize(self, *args)

    def insert(self, *args):
        """
        insert(std_vector self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator

        Parameters:
            pos: std::vector< double >::iterator
            x: std::vector< double >::value_type const &

        insert(std_vector self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters:
            pos: std::vector< double >::iterator
            n: std::vector< double >::size_type
            x: std::vector< double >::value_type const &

        """
        return _wavenet.std_vector_insert(self, *args)

    def reserve(self, *args):
        """
        reserve(std_vector self, std::vector< double >::size_type n)

        Parameters:
            n: std::vector< double >::size_type

        """
        return _wavenet.std_vector_reserve(self, *args)

    def capacity(self):
        """
        capacity(std_vector self) -> std::vector< double >::size_type

        Parameters:
            self: std::vector< double > const *

        """
        return _wavenet.std_vector_capacity(self)

    __swig_destroy__ = _wavenet.delete_std_vector
    __del__ = lambda self : None;
std_vector_swigregister = _wavenet.std_vector_swigregister
std_vector_swigregister(std_vector)

class param_series(_object):
    """Proxy of C++ std::list<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, param_series, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, param_series, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(param_series self) -> SwigPyIterator

        Parameters:
            self: std::list< double > *

        """
        return _wavenet.param_series_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(param_series self) -> bool

        Parameters:
            self: std::list< double > const *

        """
        return _wavenet.param_series___nonzero__(self)

    def __bool__(self):
        """
        __bool__(param_series self) -> bool

        Parameters:
            self: std::list< double > const *

        """
        return _wavenet.param_series___bool__(self)

    def __len__(self):
        """
        __len__(param_series self) -> std::list< double >::size_type

        Parameters:
            self: std::list< double > const *

        """
        return _wavenet.param_series___len__(self)

    def pop(self):
        """
        pop(param_series self) -> std::list< double >::value_type

        Parameters:
            self: std::list< double > *

        """
        return _wavenet.param_series_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(param_series self, std::list< double >::difference_type i, std::list< double >::difference_type j) -> param_series

        Parameters:
            i: std::list< double >::difference_type
            j: std::list< double >::difference_type

        """
        return _wavenet.param_series___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(param_series self, std::list< double >::difference_type i, std::list< double >::difference_type j, param_series v=std::list< double,std::allocator< double > >())

        Parameters:
            i: std::list< double >::difference_type
            j: std::list< double >::difference_type
            v: std::list< double,std::allocator< double > > const &

        __setslice__(param_series self, std::list< double >::difference_type i, std::list< double >::difference_type j)

        Parameters:
            i: std::list< double >::difference_type
            j: std::list< double >::difference_type

        """
        return _wavenet.param_series___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(param_series self, std::list< double >::difference_type i, std::list< double >::difference_type j)

        Parameters:
            i: std::list< double >::difference_type
            j: std::list< double >::difference_type

        """
        return _wavenet.param_series___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(param_series self, std::list< double >::difference_type i)

        Parameters:
            i: std::list< double >::difference_type

        __delitem__(param_series self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        """
        return _wavenet.param_series___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(param_series self, PySliceObject * slice) -> param_series

        Parameters:
            slice: PySliceObject *

        __getitem__(param_series self, std::list< double >::difference_type i) -> std::list< double >::value_type const &

        Parameters:
            i: std::list< double >::difference_type

        """
        return _wavenet.param_series___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(param_series self, PySliceObject * slice, param_series v)

        Parameters:
            slice: PySliceObject *
            v: std::list< double,std::allocator< double > > const &

        __setitem__(param_series self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        __setitem__(param_series self, std::list< double >::difference_type i, std::list< double >::value_type const & x)

        Parameters:
            i: std::list< double >::difference_type
            x: std::list< double >::value_type const &

        """
        return _wavenet.param_series___setitem__(self, *args)

    def append(self, *args):
        """
        append(param_series self, std::list< double >::value_type const & x)

        Parameters:
            x: std::list< double >::value_type const &

        """
        return _wavenet.param_series_append(self, *args)

    def empty(self):
        """
        empty(param_series self) -> bool

        Parameters:
            self: std::list< double > const *

        """
        return _wavenet.param_series_empty(self)

    def size(self):
        """
        size(param_series self) -> std::list< double >::size_type

        Parameters:
            self: std::list< double > const *

        """
        return _wavenet.param_series_size(self)

    def clear(self):
        """
        clear(param_series self)

        Parameters:
            self: std::list< double > *

        """
        return _wavenet.param_series_clear(self)

    def swap(self, *args):
        """
        swap(param_series self, param_series v)

        Parameters:
            v: std::list< double > &

        """
        return _wavenet.param_series_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(param_series self) -> std::list< double >::allocator_type

        Parameters:
            self: std::list< double > const *

        """
        return _wavenet.param_series_get_allocator(self)

    def begin(self):
        """
        begin(param_series self) -> std::list< double >::iterator

        Parameters:
            self: std::list< double > *

        """
        return _wavenet.param_series_begin(self)

    def end(self):
        """
        end(param_series self) -> std::list< double >::iterator

        Parameters:
            self: std::list< double > *

        """
        return _wavenet.param_series_end(self)

    def rbegin(self):
        """
        rbegin(param_series self) -> std::list< double >::reverse_iterator

        Parameters:
            self: std::list< double > *

        """
        return _wavenet.param_series_rbegin(self)

    def rend(self):
        """
        rend(param_series self) -> std::list< double >::reverse_iterator

        Parameters:
            self: std::list< double > *

        """
        return _wavenet.param_series_rend(self)

    def pop_back(self):
        """
        pop_back(param_series self)

        Parameters:
            self: std::list< double > *

        """
        return _wavenet.param_series_pop_back(self)

    def erase(self, *args):
        """
        erase(param_series self, std::list< double >::iterator pos) -> std::list< double >::iterator

        Parameters:
            pos: std::list< double >::iterator

        erase(param_series self, std::list< double >::iterator first, std::list< double >::iterator last) -> std::list< double >::iterator

        Parameters:
            first: std::list< double >::iterator
            last: std::list< double >::iterator

        """
        return _wavenet.param_series_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::list<(double)> self) -> param_series
        __init__(std::list<(double)> self, param_series arg2) -> param_series

        Parameters:
            arg2: std::list< double > const &

        __init__(std::list<(double)> self, std::list< double >::size_type size) -> param_series

        Parameters:
            size: std::list< double >::size_type

        __init__(std::list<(double)> self, std::list< double >::size_type size, std::list< double >::value_type const & value) -> param_series

        Parameters:
            size: std::list< double >::size_type
            value: std::list< double >::value_type const &

        """
        this = _wavenet.new_param_series(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """
        push_back(param_series self, std::list< double >::value_type const & x)

        Parameters:
            x: std::list< double >::value_type const &

        """
        return _wavenet.param_series_push_back(self, *args)

    def front(self):
        """
        front(param_series self) -> std::list< double >::value_type const &

        Parameters:
            self: std::list< double > const *

        """
        return _wavenet.param_series_front(self)

    def back(self):
        """
        back(param_series self) -> std::list< double >::value_type const &

        Parameters:
            self: std::list< double > const *

        """
        return _wavenet.param_series_back(self)

    def assign(self, *args):
        """
        assign(param_series self, std::list< double >::size_type n, std::list< double >::value_type const & x)

        Parameters:
            n: std::list< double >::size_type
            x: std::list< double >::value_type const &

        """
        return _wavenet.param_series_assign(self, *args)

    def resize(self, *args):
        """
        resize(param_series self, std::list< double >::size_type new_size)

        Parameters:
            new_size: std::list< double >::size_type

        resize(param_series self, std::list< double >::size_type new_size, std::list< double >::value_type const & x)

        Parameters:
            new_size: std::list< double >::size_type
            x: std::list< double >::value_type const &

        """
        return _wavenet.param_series_resize(self, *args)

    def insert(self, *args):
        """
        insert(param_series self, std::list< double >::iterator pos, std::list< double >::value_type const & x) -> std::list< double >::iterator

        Parameters:
            pos: std::list< double >::iterator
            x: std::list< double >::value_type const &

        insert(param_series self, std::list< double >::iterator pos, std::list< double >::size_type n, std::list< double >::value_type const & x)

        Parameters:
            pos: std::list< double >::iterator
            n: std::list< double >::size_type
            x: std::list< double >::value_type const &

        """
        return _wavenet.param_series_insert(self, *args)

    def pop_front(self):
        """
        pop_front(param_series self)

        Parameters:
            self: std::list< double > *

        """
        return _wavenet.param_series_pop_front(self)

    def push_front(self, *args):
        """
        push_front(param_series self, std::list< double >::value_type const & x)

        Parameters:
            x: std::list< double >::value_type const &

        """
        return _wavenet.param_series_push_front(self, *args)

    def reverse(self):
        """
        reverse(param_series self)

        Parameters:
            self: std::list< double > *

        """
        return _wavenet.param_series_reverse(self)

    __swig_destroy__ = _wavenet.delete_param_series
    __del__ = lambda self : None;
param_series_swigregister = _wavenet.param_series_swigregister
param_series_swigregister(param_series)

class wavelon(_object):
    """Proxy of C++ wavelon class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wavelon, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wavelon, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _wavenet.wavelon_a_set
    __swig_getmethods__["a"] = _wavenet.wavelon_a_get
    if _newclass:a = _swig_property(_wavenet.wavelon_a_get, _wavenet.wavelon_a_set)
    __swig_setmethods__["b"] = _wavenet.wavelon_b_set
    __swig_getmethods__["b"] = _wavenet.wavelon_b_get
    if _newclass:b = _swig_property(_wavenet.wavelon_b_get, _wavenet.wavelon_b_set)
    __swig_setmethods__["p"] = _wavenet.wavelon_p_set
    __swig_getmethods__["p"] = _wavenet.wavelon_p_get
    if _newclass:p = _swig_property(_wavenet.wavelon_p_get, _wavenet.wavelon_p_set)
    __swig_setmethods__["w"] = _wavenet.wavelon_w_set
    __swig_getmethods__["w"] = _wavenet.wavelon_w_get
    if _newclass:w = _swig_property(_wavenet.wavelon_w_get, _wavenet.wavelon_w_set)
    def __init__(self): 
        """__init__(wavelon self) -> wavelon"""
        this = _wavenet.new_wavelon()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wavenet.delete_wavelon
    __del__ = lambda self : None;
wavelon_swigregister = _wavenet.wavelon_swigregister
wavelon_swigregister(wavelon)

class ActivateFunc(_object):
    """Proxy of C++ ActivateFunc class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActivateFunc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ActivateFunc, name)
    __repr__ = _swig_repr
    Morlet = _wavenet.ActivateFunc_Morlet
    POLYWOG = _wavenet.ActivateFunc_POLYWOG
    RASP1 = _wavenet.ActivateFunc_RASP1
    def __init__(self): 
        """__init__(ActivateFunc self) -> ActivateFunc"""
        this = _wavenet.new_ActivateFunc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wavenet.delete_ActivateFunc
    __del__ = lambda self : None;
ActivateFunc_swigregister = _wavenet.ActivateFunc_swigregister
ActivateFunc_swigregister(ActivateFunc)

class TrainStrategy(_object):
    """Proxy of C++ TrainStrategy class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrainStrategy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TrainStrategy, name)
    __repr__ = _swig_repr
    Gradient = _wavenet.TrainStrategy_Gradient
    CG = _wavenet.TrainStrategy_CG
    BFGS = _wavenet.TrainStrategy_BFGS
    def __init__(self): 
        """__init__(TrainStrategy self) -> TrainStrategy"""
        this = _wavenet.new_TrainStrategy()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wavenet.delete_TrainStrategy
    __del__ = lambda self : None;
TrainStrategy_swigregister = _wavenet.TrainStrategy_swigregister
TrainStrategy_swigregister(TrainStrategy)

class Net(_object):
    """Proxy of C++ Net class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Net, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Net, name)
    __repr__ = _swig_repr
    def f(self, *args):
        """
        f(Net self, column_vector const & x) -> double

        Parameters:
            x: column_vector const &

        """
        return _wavenet.Net_f(self, *args)

    def der(self, *args):
        """
        der(Net self, column_vector const & x) -> column_vector

        Parameters:
            x: column_vector const &

        """
        return _wavenet.Net_der(self, *args)

    def __init__(self, *args): 
        """
        __init__(Net self, int ncount, double tmin, double tmax, double ymin, double a0=10., double a1=10., 
            double w0=0.1, double w1=0.1, double p0=1.0, double p1=1.0, ActFunc f=Morlet, 
            int numberOfThreads=2) -> Net

        Parameters:
            ncount: int
            tmin: double
            tmax: double
            ymin: double
            a0: double
            a1: double
            w0: double
            w1: double
            p0: double
            p1: double
            f: enum ActFunc
            numberOfThreads: int

        __init__(Net self, int ncount, double tmin, double tmax, double ymin, double a0=10., double a1=10., 
            double w0=0.1, double w1=0.1, double p0=1.0, double p1=1.0, ActFunc f=Morlet) -> Net

        Parameters:
            ncount: int
            tmin: double
            tmax: double
            ymin: double
            a0: double
            a1: double
            w0: double
            w1: double
            p0: double
            p1: double
            f: enum ActFunc

        __init__(Net self, int ncount, double tmin, double tmax, double ymin, double a0=10., double a1=10., 
            double w0=0.1, double w1=0.1, double p0=1.0, double p1=1.0) -> Net

        Parameters:
            ncount: int
            tmin: double
            tmax: double
            ymin: double
            a0: double
            a1: double
            w0: double
            w1: double
            p0: double
            p1: double

        __init__(Net self, int ncount, double tmin, double tmax, double ymin, double a0=10., double a1=10., 
            double w0=0.1, double w1=0.1, double p0=1.0) -> Net

        Parameters:
            ncount: int
            tmin: double
            tmax: double
            ymin: double
            a0: double
            a1: double
            w0: double
            w1: double
            p0: double

        __init__(Net self, int ncount, double tmin, double tmax, double ymin, double a0=10., double a1=10., 
            double w0=0.1, double w1=0.1) -> Net

        Parameters:
            ncount: int
            tmin: double
            tmax: double
            ymin: double
            a0: double
            a1: double
            w0: double
            w1: double

        __init__(Net self, int ncount, double tmin, double tmax, double ymin, double a0=10., double a1=10., 
            double w0=0.1) -> Net

        Parameters:
            ncount: int
            tmin: double
            tmax: double
            ymin: double
            a0: double
            a1: double
            w0: double

        __init__(Net self, int ncount, double tmin, double tmax, double ymin, double a0=10., double a1=10.) -> Net

        Parameters:
            ncount: int
            tmin: double
            tmax: double
            ymin: double
            a0: double
            a1: double

        __init__(Net self, int ncount, double tmin, double tmax, double ymin, double a0=10.) -> Net

        Parameters:
            ncount: int
            tmin: double
            tmax: double
            ymin: double
            a0: double

        __init__(Net self, int ncount, double tmin, double tmax, double ymin) -> Net

        Parameters:
            ncount: int
            tmin: double
            tmax: double
            ymin: double

        """
        this = _wavenet.new_Net(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wavenet.delete_Net
    __del__ = lambda self : None;
    def sim(self, *args):
        """
        sim(Net self, std_vector t, std_vector inp) -> std_vector

        Parameters:
            t: std_vector const &
            inp: std_vector const &

        """
        return _wavenet.Net_sim(self, *args)

    def gradient(self, *args):
        """
        gradient(Net self, std_vector t, std_vector target, std_vector inp) -> std_vector

        Parameters:
            t: std_vector const &
            target: std_vector const &
            inp: std_vector const &

        """
        return _wavenet.Net_gradient(self, *args)

    def energy(self, *args):
        """
        energy(Net self, std_vector t, std_vector inp, std_vector target) -> double

        Parameters:
            t: std_vector const &
            inp: std_vector const &
            target: std_vector const &

        """
        return _wavenet.Net_energy(self, *args)

    def train(self, *args):
        """
        train(Net self, Caller & cb, std_vector t, std_vector inp, std_vector target, TrainStrat train_strategy=CG, 
            int epochs=30, double goal=0.3, int show=1, bool varc=True, bool varp=True) -> train_res

        Parameters:
            cb: Caller &
            t: std_vector const &
            inp: std_vector const &
            target: std_vector const &
            train_strategy: enum TrainStrat
            epochs: int
            goal: double
            show: int
            varc: bool
            varp: bool

        train(Net self, Caller & cb, std_vector t, std_vector inp, std_vector target, TrainStrat train_strategy=CG, 
            int epochs=30, double goal=0.3, int show=1, bool varc=True) -> train_res

        Parameters:
            cb: Caller &
            t: std_vector const &
            inp: std_vector const &
            target: std_vector const &
            train_strategy: enum TrainStrat
            epochs: int
            goal: double
            show: int
            varc: bool

        train(Net self, Caller & cb, std_vector t, std_vector inp, std_vector target, TrainStrat train_strategy=CG, 
            int epochs=30, double goal=0.3, int show=1) -> train_res

        Parameters:
            cb: Caller &
            t: std_vector const &
            inp: std_vector const &
            target: std_vector const &
            train_strategy: enum TrainStrat
            epochs: int
            goal: double
            show: int

        train(Net self, Caller & cb, std_vector t, std_vector inp, std_vector target, TrainStrat train_strategy=CG, 
            int epochs=30, double goal=0.3) -> train_res

        Parameters:
            cb: Caller &
            t: std_vector const &
            inp: std_vector const &
            target: std_vector const &
            train_strategy: enum TrainStrat
            epochs: int
            goal: double

        train(Net self, Caller & cb, std_vector t, std_vector inp, std_vector target, TrainStrat train_strategy=CG, 
            int epochs=30) -> train_res

        Parameters:
            cb: Caller &
            t: std_vector const &
            inp: std_vector const &
            target: std_vector const &
            train_strategy: enum TrainStrat
            epochs: int

        train(Net self, Caller & cb, std_vector t, std_vector inp, std_vector target, TrainStrat train_strategy=CG) -> train_res

        Parameters:
            cb: Caller &
            t: std_vector const &
            inp: std_vector const &
            target: std_vector const &
            train_strategy: enum TrainStrat

        train(Net self, Caller & cb, std_vector t, std_vector inp, std_vector target) -> train_res

        Parameters:
            cb: Caller &
            t: std_vector const &
            inp: std_vector const &
            target: std_vector const &

        """
        return _wavenet.Net_train(self, *args)

Net_swigregister = _wavenet.Net_swigregister
Net_swigregister(Net)

class NetF(_object):
    """Proxy of C++ NetF class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetF, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetF, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(NetF self, Net net) -> NetF

        Parameters:
            net: Net *

        """
        this = _wavenet.new_NetF(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args):
        """
        __call__(NetF self, column_vector const & x) -> double

        Parameters:
            x: column_vector const &

        """
        return _wavenet.NetF___call__(self, *args)

    __swig_destroy__ = _wavenet.delete_NetF
    __del__ = lambda self : None;
NetF_swigregister = _wavenet.NetF_swigregister
NetF_swigregister(NetF)

class NetDer(_object):
    """Proxy of C++ NetDer class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetDer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetDer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(NetDer self, Net net) -> NetDer

        Parameters:
            net: Net *

        """
        this = _wavenet.new_NetDer(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args):
        """
        __call__(NetDer self, column_vector const & x) -> column_vector

        Parameters:
            x: column_vector const &

        """
        return _wavenet.NetDer___call__(self, *args)

    __swig_destroy__ = _wavenet.delete_NetDer
    __del__ = lambda self : None;
NetDer_swigregister = _wavenet.NetDer_swigregister
NetDer_swigregister(NetDer)

class train_set(_object):
    """Proxy of C++ std::vector<(param_series)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, train_set, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, train_set, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(train_set self) -> SwigPyIterator

        Parameters:
            self: std::vector< param_series > *

        """
        return _wavenet.train_set_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(train_set self) -> bool

        Parameters:
            self: std::vector< param_series > const *

        """
        return _wavenet.train_set___nonzero__(self)

    def __bool__(self):
        """
        __bool__(train_set self) -> bool

        Parameters:
            self: std::vector< param_series > const *

        """
        return _wavenet.train_set___bool__(self)

    def __len__(self):
        """
        __len__(train_set self) -> std::vector< std::list< double,std::allocator< double > > >::size_type

        Parameters:
            self: std::vector< param_series > const *

        """
        return _wavenet.train_set___len__(self)

    def pop(self):
        """
        pop(train_set self) -> param_series

        Parameters:
            self: std::vector< param_series > *

        """
        return _wavenet.train_set_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(train_set self, std::vector< std::list< double,std::allocator< double > > >::difference_type i, std::vector< std::list< double,std::allocator< double > > >::difference_type j) -> train_set

        Parameters:
            i: std::vector< std::list< double,std::allocator< double > > >::difference_type
            j: std::vector< std::list< double,std::allocator< double > > >::difference_type

        """
        return _wavenet.train_set___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(train_set self, std::vector< std::list< double,std::allocator< double > > >::difference_type i, std::vector< std::list< double,std::allocator< double > > >::difference_type j, 
            train_set v=std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > >())

        Parameters:
            i: std::vector< std::list< double,std::allocator< double > > >::difference_type
            j: std::vector< std::list< double,std::allocator< double > > >::difference_type
            v: std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > const &

        __setslice__(train_set self, std::vector< std::list< double,std::allocator< double > > >::difference_type i, std::vector< std::list< double,std::allocator< double > > >::difference_type j)

        Parameters:
            i: std::vector< std::list< double,std::allocator< double > > >::difference_type
            j: std::vector< std::list< double,std::allocator< double > > >::difference_type

        """
        return _wavenet.train_set___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(train_set self, std::vector< std::list< double,std::allocator< double > > >::difference_type i, std::vector< std::list< double,std::allocator< double > > >::difference_type j)

        Parameters:
            i: std::vector< std::list< double,std::allocator< double > > >::difference_type
            j: std::vector< std::list< double,std::allocator< double > > >::difference_type

        """
        return _wavenet.train_set___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(train_set self, std::vector< std::list< double,std::allocator< double > > >::difference_type i)

        Parameters:
            i: std::vector< std::list< double,std::allocator< double > > >::difference_type

        __delitem__(train_set self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        """
        return _wavenet.train_set___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(train_set self, PySliceObject * slice) -> train_set

        Parameters:
            slice: PySliceObject *

        __getitem__(train_set self, std::vector< std::list< double,std::allocator< double > > >::difference_type i) -> param_series

        Parameters:
            i: std::vector< std::list< double,std::allocator< double > > >::difference_type

        """
        return _wavenet.train_set___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(train_set self, PySliceObject * slice, train_set v)

        Parameters:
            slice: PySliceObject *
            v: std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > const &

        __setitem__(train_set self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        __setitem__(train_set self, std::vector< std::list< double,std::allocator< double > > >::difference_type i, param_series x)

        Parameters:
            i: std::vector< std::list< double,std::allocator< double > > >::difference_type
            x: std::vector< std::list< double,std::allocator< double > > >::value_type const &

        """
        return _wavenet.train_set___setitem__(self, *args)

    def append(self, *args):
        """
        append(train_set self, param_series x)

        Parameters:
            x: std::vector< std::list< double,std::allocator< double > > >::value_type const &

        """
        return _wavenet.train_set_append(self, *args)

    def empty(self):
        """
        empty(train_set self) -> bool

        Parameters:
            self: std::vector< param_series > const *

        """
        return _wavenet.train_set_empty(self)

    def size(self):
        """
        size(train_set self) -> std::vector< std::list< double,std::allocator< double > > >::size_type

        Parameters:
            self: std::vector< param_series > const *

        """
        return _wavenet.train_set_size(self)

    def clear(self):
        """
        clear(train_set self)

        Parameters:
            self: std::vector< param_series > *

        """
        return _wavenet.train_set_clear(self)

    def swap(self, *args):
        """
        swap(train_set self, train_set v)

        Parameters:
            v: std::vector< param_series > &

        """
        return _wavenet.train_set_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(train_set self) -> std::vector< std::list< double,std::allocator< double > > >::allocator_type

        Parameters:
            self: std::vector< param_series > const *

        """
        return _wavenet.train_set_get_allocator(self)

    def begin(self):
        """
        begin(train_set self) -> std::vector< std::list< double,std::allocator< double > > >::iterator

        Parameters:
            self: std::vector< param_series > *

        """
        return _wavenet.train_set_begin(self)

    def end(self):
        """
        end(train_set self) -> std::vector< std::list< double,std::allocator< double > > >::iterator

        Parameters:
            self: std::vector< param_series > *

        """
        return _wavenet.train_set_end(self)

    def rbegin(self):
        """
        rbegin(train_set self) -> std::vector< std::list< double,std::allocator< double > > >::reverse_iterator

        Parameters:
            self: std::vector< param_series > *

        """
        return _wavenet.train_set_rbegin(self)

    def rend(self):
        """
        rend(train_set self) -> std::vector< std::list< double,std::allocator< double > > >::reverse_iterator

        Parameters:
            self: std::vector< param_series > *

        """
        return _wavenet.train_set_rend(self)

    def pop_back(self):
        """
        pop_back(train_set self)

        Parameters:
            self: std::vector< param_series > *

        """
        return _wavenet.train_set_pop_back(self)

    def erase(self, *args):
        """
        erase(train_set self, std::vector< std::list< double,std::allocator< double > > >::iterator pos) -> std::vector< std::list< double,std::allocator< double > > >::iterator

        Parameters:
            pos: std::vector< std::list< double,std::allocator< double > > >::iterator

        erase(train_set self, std::vector< std::list< double,std::allocator< double > > >::iterator first, std::vector< std::list< double,std::allocator< double > > >::iterator last) -> std::vector< std::list< double,std::allocator< double > > >::iterator

        Parameters:
            first: std::vector< std::list< double,std::allocator< double > > >::iterator
            last: std::vector< std::list< double,std::allocator< double > > >::iterator

        """
        return _wavenet.train_set_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(param_series)> self) -> train_set
        __init__(std::vector<(param_series)> self, train_set arg2) -> train_set

        Parameters:
            arg2: std::vector< param_series > const &

        __init__(std::vector<(param_series)> self, std::vector< std::list< double,std::allocator< double > > >::size_type size) -> train_set

        Parameters:
            size: std::vector< std::list< double,std::allocator< double > > >::size_type

        __init__(std::vector<(param_series)> self, std::vector< std::list< double,std::allocator< double > > >::size_type size, param_series value) -> train_set

        Parameters:
            size: std::vector< std::list< double,std::allocator< double > > >::size_type
            value: std::vector< std::list< double,std::allocator< double > > >::value_type const &

        """
        this = _wavenet.new_train_set(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """
        push_back(train_set self, param_series x)

        Parameters:
            x: std::vector< std::list< double,std::allocator< double > > >::value_type const &

        """
        return _wavenet.train_set_push_back(self, *args)

    def front(self):
        """
        front(train_set self) -> param_series

        Parameters:
            self: std::vector< param_series > const *

        """
        return _wavenet.train_set_front(self)

    def back(self):
        """
        back(train_set self) -> param_series

        Parameters:
            self: std::vector< param_series > const *

        """
        return _wavenet.train_set_back(self)

    def assign(self, *args):
        """
        assign(train_set self, std::vector< std::list< double,std::allocator< double > > >::size_type n, param_series x)

        Parameters:
            n: std::vector< std::list< double,std::allocator< double > > >::size_type
            x: std::vector< std::list< double,std::allocator< double > > >::value_type const &

        """
        return _wavenet.train_set_assign(self, *args)

    def resize(self, *args):
        """
        resize(train_set self, std::vector< std::list< double,std::allocator< double > > >::size_type new_size)

        Parameters:
            new_size: std::vector< std::list< double,std::allocator< double > > >::size_type

        resize(train_set self, std::vector< std::list< double,std::allocator< double > > >::size_type new_size, 
            param_series x)

        Parameters:
            new_size: std::vector< std::list< double,std::allocator< double > > >::size_type
            x: std::vector< std::list< double,std::allocator< double > > >::value_type const &

        """
        return _wavenet.train_set_resize(self, *args)

    def insert(self, *args):
        """
        insert(train_set self, std::vector< std::list< double,std::allocator< double > > >::iterator pos, param_series x) -> std::vector< std::list< double,std::allocator< double > > >::iterator

        Parameters:
            pos: std::vector< std::list< double,std::allocator< double > > >::iterator
            x: std::vector< std::list< double,std::allocator< double > > >::value_type const &

        insert(train_set self, std::vector< std::list< double,std::allocator< double > > >::iterator pos, std::vector< std::list< double,std::allocator< double > > >::size_type n, 
            param_series x)

        Parameters:
            pos: std::vector< std::list< double,std::allocator< double > > >::iterator
            n: std::vector< std::list< double,std::allocator< double > > >::size_type
            x: std::vector< std::list< double,std::allocator< double > > >::value_type const &

        """
        return _wavenet.train_set_insert(self, *args)

    def reserve(self, *args):
        """
        reserve(train_set self, std::vector< std::list< double,std::allocator< double > > >::size_type n)

        Parameters:
            n: std::vector< std::list< double,std::allocator< double > > >::size_type

        """
        return _wavenet.train_set_reserve(self, *args)

    def capacity(self):
        """
        capacity(train_set self) -> std::vector< std::list< double,std::allocator< double > > >::size_type

        Parameters:
            self: std::vector< param_series > const *

        """
        return _wavenet.train_set_capacity(self)

    __swig_destroy__ = _wavenet.delete_train_set
    __del__ = lambda self : None;
train_set_swigregister = _wavenet.train_set_swigregister
train_set_swigregister(train_set)

class train_res(_object):
    """Proxy of C++ std::map<(std::string,train_set)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, train_res, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, train_res, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(train_res self) -> SwigPyIterator

        Parameters:
            self: std::map< std::string,train_set > *

        """
        return _wavenet.train_res_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(train_res self) -> bool

        Parameters:
            self: std::map< std::string,train_set > const *

        """
        return _wavenet.train_res___nonzero__(self)

    def __bool__(self):
        """
        __bool__(train_res self) -> bool

        Parameters:
            self: std::map< std::string,train_set > const *

        """
        return _wavenet.train_res___bool__(self)

    def __len__(self):
        """
        __len__(train_res self) -> std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::size_type

        Parameters:
            self: std::map< std::string,train_set > const *

        """
        return _wavenet.train_res___len__(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args):
        """
        __getitem__(train_res self, std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::key_type const & key) -> train_set

        Parameters:
            key: std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::key_type const &

        """
        return _wavenet.train_res___getitem__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(train_res self, std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::key_type const & key)

        Parameters:
            key: std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::key_type const &

        """
        return _wavenet.train_res___delitem__(self, *args)

    def has_key(self, *args):
        """
        has_key(train_res self, std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::key_type const & key) -> bool

        Parameters:
            key: std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::key_type const &

        """
        return _wavenet.train_res_has_key(self, *args)

    def keys(self):
        """
        keys(train_res self) -> PyObject *

        Parameters:
            self: std::map< std::string,train_set > *

        """
        return _wavenet.train_res_keys(self)

    def values(self):
        """
        values(train_res self) -> PyObject *

        Parameters:
            self: std::map< std::string,train_set > *

        """
        return _wavenet.train_res_values(self)

    def items(self):
        """
        items(train_res self) -> PyObject *

        Parameters:
            self: std::map< std::string,train_set > *

        """
        return _wavenet.train_res_items(self)

    def __contains__(self, *args):
        """
        __contains__(train_res self, std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::key_type const & key) -> bool

        Parameters:
            key: std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::key_type const &

        """
        return _wavenet.train_res___contains__(self, *args)

    def key_iterator(self):
        """
        key_iterator(train_res self) -> SwigPyIterator

        Parameters:
            self: std::map< std::string,train_set > *

        """
        return _wavenet.train_res_key_iterator(self)

    def value_iterator(self):
        """
        value_iterator(train_res self) -> SwigPyIterator

        Parameters:
            self: std::map< std::string,train_set > *

        """
        return _wavenet.train_res_value_iterator(self)

    def __setitem__(self, *args):
        """
        __setitem__(train_res self, std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::key_type const & key)

        Parameters:
            key: std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::key_type const &

        __setitem__(train_res self, std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::key_type const & key, 
            train_set x)

        Parameters:
            key: std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::key_type const &
            x: std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::mapped_type const &

        """
        return _wavenet.train_res___setitem__(self, *args)

    def asdict(self):
        """
        asdict(train_res self) -> PyObject *

        Parameters:
            self: std::map< std::string,train_set > *

        """
        return _wavenet.train_res_asdict(self)

    def __init__(self, *args): 
        """
        __init__(std::map<(std::string,train_set)> self, std::less< std::string > const & arg2) -> train_res

        Parameters:
            arg2: std::less< std::string > const &

        __init__(std::map<(std::string,train_set)> self) -> train_res
        __init__(std::map<(std::string,train_set)> self, train_res arg2) -> train_res

        Parameters:
            arg2: std::map< std::string,train_set > const &

        """
        this = _wavenet.new_train_res(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """
        empty(train_res self) -> bool

        Parameters:
            self: std::map< std::string,train_set > const *

        """
        return _wavenet.train_res_empty(self)

    def size(self):
        """
        size(train_res self) -> std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::size_type

        Parameters:
            self: std::map< std::string,train_set > const *

        """
        return _wavenet.train_res_size(self)

    def clear(self):
        """
        clear(train_res self)

        Parameters:
            self: std::map< std::string,train_set > *

        """
        return _wavenet.train_res_clear(self)

    def swap(self, *args):
        """
        swap(train_res self, train_res v)

        Parameters:
            v: std::map< std::string,train_set > &

        """
        return _wavenet.train_res_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(train_res self) -> std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::allocator_type

        Parameters:
            self: std::map< std::string,train_set > const *

        """
        return _wavenet.train_res_get_allocator(self)

    def begin(self):
        """
        begin(train_res self) -> std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::iterator

        Parameters:
            self: std::map< std::string,train_set > *

        """
        return _wavenet.train_res_begin(self)

    def end(self):
        """
        end(train_res self) -> std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::iterator

        Parameters:
            self: std::map< std::string,train_set > *

        """
        return _wavenet.train_res_end(self)

    def rbegin(self):
        """
        rbegin(train_res self) -> std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::reverse_iterator

        Parameters:
            self: std::map< std::string,train_set > *

        """
        return _wavenet.train_res_rbegin(self)

    def rend(self):
        """
        rend(train_res self) -> std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::reverse_iterator

        Parameters:
            self: std::map< std::string,train_set > *

        """
        return _wavenet.train_res_rend(self)

    def count(self, *args):
        """
        count(train_res self, std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::key_type const & x) -> std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::size_type

        Parameters:
            x: std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::key_type const &

        """
        return _wavenet.train_res_count(self, *args)

    def erase(self, *args):
        """
        erase(train_res self, std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::key_type const & x) -> std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::size_type

        Parameters:
            x: std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::key_type const &

        erase(train_res self, std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::iterator position)

        Parameters:
            position: std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::iterator

        erase(train_res self, std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::iterator first, 
            std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::iterator last)

        Parameters:
            first: std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::iterator
            last: std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::iterator

        """
        return _wavenet.train_res_erase(self, *args)

    def find(self, *args):
        """
        find(train_res self, std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::key_type const & x) -> std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::iterator

        Parameters:
            x: std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::key_type const &

        """
        return _wavenet.train_res_find(self, *args)

    def lower_bound(self, *args):
        """
        lower_bound(train_res self, std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::key_type const & x) -> std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::iterator

        Parameters:
            x: std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::key_type const &

        """
        return _wavenet.train_res_lower_bound(self, *args)

    def upper_bound(self, *args):
        """
        upper_bound(train_res self, std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::key_type const & x) -> std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::iterator

        Parameters:
            x: std::map< std::string,std::vector< std::list< double,std::allocator< double > >,std::allocator< std::list< double,std::allocator< double > > > > >::key_type const &

        """
        return _wavenet.train_res_upper_bound(self, *args)

    __swig_destroy__ = _wavenet.delete_train_res
    __del__ = lambda self : None;
train_res_swigregister = _wavenet.train_res_swigregister
train_res_swigregister(train_res)

# This file is compatible with both classic and new-style classes.


